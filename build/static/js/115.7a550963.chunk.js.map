{"version":3,"file":"static/js/115.7a550963.chunk.js","mappings":"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","sources":["pages/moviedetails.js"],"sourcesContent":["import { Box, Grid } from '@mui/material';\r\nimport { Home } from '@mui/icons-material';\r\nimport axios from 'axios';\r\nimport * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { movieDetailUrl, token, credits, crew } from \"../config/config\";\r\n\r\nconst DetailsComp = (props) => {\r\n    const navigate = useNavigate();\r\n    var data = props.movieData;\r\n    var credits = props.credits;\r\n\r\n    const convertTime = (mins) => {\r\n        var hrs = (mins / 60);\r\n        var roundedHrs = Math.floor(hrs);\r\n        var HH = roundedHrs.toString().length < 2 ? `0${roundedHrs}` : roundedHrs;\r\n        var min = mins - (roundedHrs * 60);\r\n        var MM = min.toString().length < 2 ? `0${min}` : min;\r\n        return HH + \":\" + MM;\r\n    }\r\n    const getDate = (dt) => {\r\n        const date = new Date(dt);\r\n        return date.getFullYear();\r\n    }\r\n    const getDirector = (crew) =>{\r\n        var director = \"\";\r\n        crew.filter((cr)=>{\r\n            if(cr.department === \"Directing\" && cr.job === \"Director\") {\r\n                director = cr.name;\r\n            }\r\n        })\r\n        return director;\r\n    }\r\n    const getCast = (cast) => {\r\n        var maxNeeded = 5;\r\n        var sortedCast = cast.sort((a, b)=> {\r\n            if(a.popularity - b.popularity > 0){\r\n                return -1\r\n            } else if(a.popularity - b.popularity < 0){\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        });\r\n        if(sortedCast.length - 1 < maxNeeded){\r\n            maxNeeded = sortedCast.length - 1;\r\n        }\r\n        var top3 = sortedCast.slice(0, 5);\r\n        return top3;\r\n    }\r\n\r\n    const gotoHome = () => {\r\n        navigate(\"/\");\r\n    }\r\n\r\n    return <Box sx={{ maxWidth: '100%', textAlign: 'left' }}>\r\n        <Box\r\n        sx={{ \r\n        p: 2,\r\n        textAlign: 'left',\r\n        boxShadow: '0px 0px 10px grey',\r\n        fontWeight: '600',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n        }}>\r\n            <span>Movie Details</span>\r\n            <div>\r\n                <Home sx={{ cursor: 'pointer' }} onClick={gotoHome}/>\r\n            </div>\r\n        </Box>\r\n        <Grid container spacing={2} sx={{ padding: 2 }} sx={{display:'flex', flexDirection:{xs:'column', lg:'row', md:'row', xl:'row'  }}}>\r\n            <Grid item xs={10} lg={2.3} md={2.3}>\r\n                <img\r\n                    src={`https://image.tmdb.org/t/p/original${data.poster_path}`}\r\n                    alt=\"selected_poster_image\"\r\n                    style={{\r\n                        width: '100%'\r\n                    }}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={9.7} lg={9.7} md={9.7}>\r\n                <Grid>\r\n                    <Grid sx={{ m: 0.5 }}>\r\n                        <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-end' }}>\r\n                            <span style={{ fontSize: 'calc(0.8vw + 10px)', fontWeight: '600', lineHeight: '100%' }}>{data.original_title}</span>\r\n                            <span style={{ fontSize: 'calc(0.25vw + 8px)', fontWeight: '500', color: '#6a6a6aa6' }}>{(data.vote_average).toFixed(2)}</span>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid sx={{ m: 0.5 }}>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            <span>{getDate(data.release_date)}</span> |\r\n                            <span>{convertTime(data.runtime)}</span> |\r\n                            <span>{getDirector(credits.crew)}</span>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid sx={{ m: 0.5 }}>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            <span>Cast: </span>\r\n                            <span style={{ width: '200px', overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis' }}>{getCast(credits.cast).map((cast, i)=>{\r\n                                return <span key={cast.id}>{cast.name}, </span>\r\n                            })}</span>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid sx={{ m: 0.5 }}>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            <span>Description:{\"  \"}\r\n                                {\r\n                                    data.overview\r\n                                }\r\n                            </span>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Box>\r\n}\r\n\r\nconst MovieDetails = () => {\r\n    const location = useLocation();\r\n    const movieId = location.search.split(\"?\")[1];\r\n    const [movieData, updateMovieData] = React.useState(null);\r\n    const [credits, setcredits] = React.useState(null);\r\n\r\n    const endpoints = [\r\n        `${movieDetailUrl}${movieId}?language=en-US`,\r\n        `${crew}${movieId}/credits?language=en-US`\r\n        ]\r\n\r\n    React.useEffect(() => {    \r\n        const axiosInstance = axios.create({\r\n            headers: {\r\n                accept: 'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n          });\r\n        \r\n        axios.all(endpoints.map((endpoint) => axiosInstance.get(endpoint))).then(\r\n            axios.spread((details, credits) => {\r\n                updateMovieData(details.data);\r\n                setcredits(credits.data)\r\n              })\r\n        ).catch((err)=>console.log(err))\r\n\r\n    }, [movieId])\r\n\r\n    return <Box sx={{ width: '100%' }}>\r\n        {\r\n            movieData ? (\r\n                <>\r\n                    <DetailsComp movieData={movieData} credits={credits} />\r\n                </>\r\n            ) : (\r\n                <Box>Loading..</Box>\r\n            )\r\n        }\r\n    </Box>\r\n}\r\n\r\nexport default MovieDetails;"],"names":["DetailsComp","props","_jsxs2","dt","navigate","useNavigate","data","movieData","credits","_jsxs","Box","sx","maxWidth","textAlign","children","p","boxShadow","fontWeight","display","justifyContent","_jsx","Home","cursor","onClick","Grid","container","spacing","padding","_defineProperty","flexDirection","xs","lg","md","xl","item","src","concat","poster_path","alt","style","width","m","gap","alignItems","fontSize","lineHeight","original_title","color","vote_average","toFixed","release_date","Date","getFullYear","mins","hrs","roundedHrs","Math","floor","HH","toString","length","min","convertTime","runtime","crew","director","filter","cr","department","job","name","getDirector","overflow","whiteSpace","textOverflow","cast","maxNeeded","sortedCast","sort","a","b","popularity","slice","getCast","map","i","id","overview","movieId","useLocation","search","split","_React$useState","React","_React$useState2","_slicedToArray","updateMovieData","_React$useState3","_React$useState4","setcredits","endpoints","movieDetailUrl","axiosInstance","axios","create","headers","accept","Authorization","token","all","endpoint","get","then","spread","details","catch","err","console","log","_Fragment"],"sourceRoot":""}